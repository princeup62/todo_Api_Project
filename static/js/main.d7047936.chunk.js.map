{"version":3,"sources":["components/Mod.js","components/EditMod.js","assests/images/Hourglass.gif","App.js","reportWebVitals.js","index.js"],"names":["Mod","show","handleClose","setListProps","ListProps","useState","todo","dueDate","Date","importance","isDone","NewTodoPost","setNewTodoPost","handleChange","event","name","target","value","Modal","onHide","Header","closeButton","Title","Body","className","for","type","class","placeholder","onChange","Footer","Button","variant","onClick","fetch","method","headers","body","JSON","stringify","then","result","json","response","EditMod","handleCloseEditMod","showEditMod","handleShowEditMod","updateList","setUpdateList","FormGroup","FormControlLabel","control","Switch","checked","label","console","log","id","tempobject","resp","App","setShow","List","setList","isLoading","setIsLoading","setShowEditMod","pid","useEffect","handleShow","Fab","size","color","aria-label","src","Spinner","alt","map","el","role","eventID","tempArray","filter","item","alert","icon","faTrash","faPen","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7047936.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nfunction Mod({ show, handleClose, setListProps, ListProps }) {\r\n  const [NewTodoPost, setNewTodoPost] = useState({\r\n    todo: \"\",\r\n    dueDate: new Date(),\r\n    importance: \"Medium\",\r\n    isDone: false,\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    setNewTodoPost({ ...NewTodoPost, [name]: value });\r\n  };\r\n\r\n  const handlePost = () => {\r\n    handleClose();\r\n    fetch(\"https://60b5a271fe923b0017c84482.mockapi.io/todo\", {\r\n      method: \"POST\",\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(NewTodoPost),\r\n    }).then((result) =>\r\n      result.json().then((response) => {\r\n        // setListProps(...ListProps, response);\r\n        setListProps([...ListProps, response]);\r\n        setNewTodoPost({ ...NewTodoPost, todo: \"\" });\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Todo List</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleFormControlInput1\">Todo</label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"enter todo task...\"\r\n              name=\"todo\"\r\n              onChange={handleChange}\r\n              value={NewTodoPost.todo}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleFormControlInput1\">Priority Level</label>\r\n            <select\r\n              className=\"form-control\"\r\n              name=\"importance\"\r\n              onChange={handleChange}\r\n              value={NewTodoPost.importance}\r\n            >\r\n              <option>High</option>\r\n              <option>Medium</option>\r\n              <option>Low</option>\r\n            </select>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handlePost}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Mod;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nfunction EditMod({\r\n  handleCloseEditMod,\r\n  handleShowEditMod,\r\n  showEditMod,\r\n  updateList,\r\n  setUpdateList,\r\n}) {\r\n  const handleChange = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    setUpdateList({ ...updateList, [name]: value });\r\n  };\r\n\r\n  const toggleChecked = () => {\r\n    setUpdateList({ ...updateList, isDone: !updateList.isDone });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    handleCloseEditMod();\r\n    console.log(updateList.id);\r\n    let tempobject = {\r\n      todo: updateList.todo,\r\n      dueDate: updateList.dueDate,\r\n      importance: updateList.importance,\r\n      isDone: updateList.isDone,\r\n    };\r\n    fetch(`https://60b5a271fe923b0017c84482.mockapi.io/todo/${updateList.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(tempobject),\r\n    }).then((result) => {\r\n      result.json().then((resp) => {\r\n        console.log(resp);\r\n      });\r\n    });\r\n    console.log(tempobject);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={showEditMod} onHide={handleCloseEditMod}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Todo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleInputEmail1\">Todo:</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              value={updateList.todo}\r\n              name=\"todo\"\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleFormControlSelect1\">Priority Level:</label>\r\n            <select\r\n              class=\"form-control\"\r\n              value={updateList.importance}\r\n              name=\"importance\"\r\n              onChange={handleChange}\r\n            >\r\n              <option>High</option>\r\n              <option>Medium</option>\r\n              <option>Low</option>\r\n            </select>\r\n\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={updateList.isDone}\r\n                    onChange={toggleChecked}\r\n                  />\r\n                }\r\n                label={updateList.isDone ? \"Done\" : \"Not Done\"}\r\n              />\r\n            </FormGroup>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleCloseEditMod}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleSubmit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditMod;\r\n","export default __webpack_public_path__ + \"static/media/Hourglass.9339400d.gif\";","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen, faTrash, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport Mod from \"./components/Mod\";\nimport EditMod from \"./components/EditMod\";\nimport Spinner from \"../src/assests/images/Hourglass.gif\";\n\nconst App = () => {\n  const [show, setShow] = useState(false);\n  const [showEdit, setShowEdit] = useState(false);\n  const [List, setList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [updateList, setUpdateList] = useState({\n    todo: \"\",\n    dueDate: \"\",\n    importance: \"\",\n    isDone: false,\n  });\n\n  const [showEditMod, setShowEditMod] = useState(false);\n  const handleCloseEditMod = () => setShowEditMod(false);\n  const handleShowEditMod = (pid) => {\n    setShowEditMod(true);\n\n    fetch(`https://60b5a271fe923b0017c84482.mockapi.io/todo/${pid}`).then(\n      (response) =>\n        response.json().then((result) => {\n          setUpdateList({\n            id: pid,\n            todo: result.todo,\n            dueDate: result.dueDate,\n            importance: result.importance,\n            isDone: result.isDone,\n          });\n        })\n    );\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://60b5a271fe923b0017c84482.mockapi.io/todo\").then((response) =>\n      response.json().then((result) => {\n        setList(result);\n        setIsLoading(false);\n      })\n    );\n  }, []);\n\n  const handleDelete = (eventID) => {\n    fetch(`https://60b5a271fe923b0017c84482.mockapi.io/todo/${eventID}`, {\n      method: \"DELETE\",\n    }).then(() => {\n      let tempArray = List.filter((item) => item.id !== eventID);\n      setList([...tempArray]);\n\n      alert(\"deleted\");\n    });\n  };\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        {/* ---------------------title-start----------------------------- */}\n        <div className=\"title shadow-sm\">\n          <div className=\"col-md-12 d-flex justify-content-between align-items-center py-4\">\n            <h1>TODO</h1>\n            <Fab\n              size=\"small\"\n              color=\"primary\"\n              aria-label=\"add\"\n              onClick={handleShow}\n            >\n              <AddIcon />\n            </Fab>\n          </div>\n        </div>\n        {/* ------------------------title-end--------------------------- */}\n\n        <Mod\n          show={show}\n          handleClose={handleClose}\n          handleShow={handleShow}\n          setListProps={setList}\n          ListProps={List}\n        />\n\n        <EditMod\n          handleCloseEditMod={handleCloseEditMod}\n          handleShowEditMod={handleShowEditMod}\n          showEditMod={showEditMod}\n          updateList={updateList}\n          setUpdateList={setUpdateList}\n        />\n\n        {/* -------------------------body-start----------------------------------*/}\n        <div className=\"col-md-12 all-todo-wrapper text-center d-lg-flex justify-content-center flex-wrap \">\n          {isLoading ? (\n            <img src={Spinner} alt=\"\" className=\"my-5\" />\n          ) : (\n            List.map((el) => (\n              <div className=\"card shadow-md  my-5 col-md-3 mx-lg-5\">\n                <div className=\"card-body \">\n                  <div className=\"d-flex  justify-content-between align-items-center\">\n                    <h4>{el.todo}</h4>\n                    <h6 className=\"text-primary\">{el.importance}</h6>\n                  </div>\n                  <p className=\"text-muted\">Due: {el.dueDate}</p>\n\n                  <div\n                    className=\" btn-group\"\n                    role=\"group\"\n                    aria-label=\"Basic example\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-light \"\n                      onClick={() => handleDelete(el.id)}\n                    >\n                      <FontAwesomeIcon icon={faTrash} color=\"blue\" />\n                    </button>\n                    <button type=\"button\" className=\"btn btn-light\">\n                      <FontAwesomeIcon\n                        icon={faPen}\n                        color=\"blue\"\n                        onClick={() => handleShowEditMod(el.id)}\n                      />\n                    </button>\n                    <span\n                      style={{ color: el.isDone ? \"green\" : \"red\" }}\n                      className=\"mx-5\"\n                    >\n                      {el.isDone ? \"Done\" : \"Not Done\"}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* -------------------------body-end-------------------------------------- */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}